@page "/"
@namespace LatestBlazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject ThemeState ThemeState
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
        Radzen Blazor Components
    </title>
    <environment include="Development">
        <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    </environment>
    <environment exclude="Development">
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
              asp-fallback-href="css/bootstrap/bootstrap.min.css"
              asp-fallback-test-class="sr-only" asp-fallback-test-property="position" asp-fallback-test-value="absolute"
              crossorigin="anonymous"
              integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" />
    </environment>
    <link href="css/site.css" rel="stylesheet" />
</head>
<body>
    <app>@(await Html.RenderComponentAsync<App>())</app>
    <script>
        window.readFileAsBase64 = (fileInput) => {
            const readAsDataURL = (fileInput) => {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onerror = () => {
                        reader.abort();
                        reject(new Error("Error reading file."));
                    };
                    reader.addEventListener("load", () => {
                        resolve(reader.result);
                    }, false);
                    reader.readAsDataURL(fileInput.files[0]);
                });
            };

            return readAsDataURL(fileInput);
        };

        window.getPopupWidthAndTop = (popup, sibling) => {
            var el = sibling ? popup.previousElementSibling : popup.parentNode;
            var elHeight = sibling ? popup.getBoundingClientRect().height : 0;
            var rect = el.getBoundingClientRect();
            var display = popup.style.display == 'none' ? 'display:none;' : '';
            popup.style.display = 'inline-block';
            return `width:calc(${rect.width + 'px'} - 1.425rem); top:${rect.top + rect.height + elHeight - 3 + 'px'}; ${display}`;
        };

        window.getInputValue = (arg) => {
            var input = (arg instanceof Element || arg instanceof HTMLDocument) ? arg : document.getElementById(id);
            return input ? input.value : '';
        };

        window.closePopup = (e, el) => {
            if (!el.contains(e.relatedTarget) && el.children[1]) {
                el.children[1].style.display = 'none';
            }
        };

        window.openPopup = (e, el) => {
            const handler = () => {
                popup.style.display = 'none';
                window.removeEventListener('wheel', handler);
            };
            window.addEventListener('wheel', handler);

            var popup = el.parentNode.parentNode.children[1];
            popup.style.cssText = popup.style.display == 'none' ?
                `margin-left: 0px; z-index: 1002; transform: translateY(0px); opacity: 1; position: fixed; ${getPopupWidthAndTop(popup).replace('display:none;' ,'')};width:320px;`
                : 'display:none;';
        };
    </script>
    <script src="_framework/blazor.server.js"></script>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-73079289-4"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', 'UA-73079289-4');
    </script>
</body>
</html>
