@page "/selectbar"
@using Radzen
@using NorthwindBlazor.Data
@using NorthwindBlazor.Models.Northwind
@using Microsoft.EntityFrameworkCore

@inject NorthwindContext dbContext

<h1 style="display:inline">SelectBar</h1><a style="margin-left: 10px" href="https://github.com/akorchev/blazor.radzen.com/blob/master/Pages/SelectBarPage.razor" target="_blank">[source code]</a><a style="margin-left: 10px" href="https://www.radzen.com/documentation/blazor/selectbar/" target="_blank">[documentation]</a>

<p>This page demonstrates <b>SelectBar</b> component.</p>
<RadzenCard>
    <div class="row">
        <div class="col-md-6">
            <h3>SelectBar with single selection</h3>
            <RadzenSelectBar Change="@((args) => Change(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;" >
                <Items>
                    <RadzenSelectBarItem Text="Orders" Value="1" />
                    <RadzenSelectBarItem Text="Employees" Value="2" />
                    <RadzenSelectBarItem Text="Customers" Value="3" />
                </Items>
            </RadzenSelectBar>
            <br />
            <h3>SelectBar with multiple selection</h3>
            <RadzenSelectBar Multiple="true" Change="@((args) => Change(args, "SelectBar with multiple selection"))">
                <Items>
                    <RadzenSelectBarItem Text="Orders" Value="1" />
                    <RadzenSelectBarItem Text="Employees" Value="2" />
                    <RadzenSelectBarItem Text="Customers" Value="3" />
                </Items>
            </RadzenSelectBar>
            <br Style="margin-bottom: 20px;"/>
        </div>
        <div class="col-md-6">
            <h3>Events</h3>
            <RadzenCard style="overflow: auto;height:500px;">
                @foreach (var e in events.OrderByDescending(i => i.Key))
                {
                    @e.Value
                    <br />
                }
            </RadzenCard>
        </div>
    </div>
</RadzenCard>

@code {
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void Change(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }
}
